version: "3"

services:
  redis:
    image: redislabs/redistimeseries
    restart: unless-stopped
    networks:
      - db
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s

  mqtt_to_redis:
    image: mqtt_to_redis
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - db
    environment:
      PYTHONUNBUFFERED: ${PYTHONUNBUFFERED}
      REDIS_HOSTNAME: ${REDIS_HOSTNAME}
      REDIS_PORT: ${REDIS_PORT}
      MQTT_HOSTNAME: ${MQTT_HOSTNAME}
      MQTT_USERNAME: ${MQTT_USERNAME}
      MQTT_PASSWORD: ${MQTT_PASSWORD}

#  mqtt_dummy_publisher:
#    image: mqtt_dummy_publisher
#    restart: unless-stopped
#    environment:
#      PYTHONUNBUFFERED: ${PYTHONUNBUFFERED}
#      MQTT_HOSTNAME: ${MQTT_HOSTNAME}
#      MQTT_USERNAME: ${MQTT_USERNAME}
#      MQTT_PASSWORD: ${MQTT_PASSWORD}

  webserver:
    image: cot_webserver_prod:latest
    restart: unless-stopped
    depends_on:
      - redis
      - mqtt_to_redis
    networks:
      - web
      - db
    ports:
      - '127.0.0.1:8080:8000'
    command: ["gunicorn", "--workers=4", "--bind=0.0.0.0:8000", "src.app:app"]
    environment:
      PYTHONUNBUFFERED: ${PYTHONUNBUFFERED}
      REDIS_HOSTNAME: ${REDIS_HOSTNAME}
      REDIS_PORT: ${REDIS_PORT}

        #  caddy:
        #image: caddy:2-alpine
        #restart: unless-stopped
        #depends_on:
        #- webserver
        #networks:
        #- web
        #ports:
        #- '127.0.0.1:8080:8080'
        #volumes:
        #- ./Caddyfile:/etc/caddy/Caddyfile:ro
        #environment:
        #- CADDY_HOSTNAME=http://:8080
        #cap_drop:
        #- ALL
        #cap_add:
        #- NET_BIND_SERVICE

networks:
  db:
  web:
